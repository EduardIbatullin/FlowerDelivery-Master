# bot/tests/test_handlers.py

import unittest  # –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
from unittest.mock import patch, AsyncMock, MagicMock  # –ò–º–ø–æ—Ä—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫-–æ–±—ä–µ–∫—Ç–æ–≤ –∏ –ø–æ–¥–º–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
from telegram import Update, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputFile  # –ò–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
from telegram.ext import ContextTypes  # –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –±–æ—Ç–∞

from bot.handlers import (  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    register_start_command,
    register_callback,
    handle_start_command,
    view_analytics_handler,
    analytics_handler,
    send_sales_chart
)


class BotHandlersTest(unittest.IsolatedAsyncioTestCase):
    """
    –¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤) –≤ –±–æ—Ç–µ.

    –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:
    1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º user_id.
    2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–≤—ã–∑–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–æ—Ç–∞).
    3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.
    5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–¥–∞–∂.
    """

    @patch('bot.handlers.send_post_request', new_callable=AsyncMock)
    async def test_register_start_command(self, mock_send_post_request):
        """
        –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º user_id.

        –õ–æ–≥–∏–∫–∞:
        - –ú–æ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã /start (–ø–µ—Ä–µ–¥–∞–µ–º user_id).
        - –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Django —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        - –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
        """
        mock_update = MagicMock(Update)
        mock_context = MagicMock(ContextTypes.DEFAULT_TYPE)
        mock_context.args = ['1']  # –ü–µ—Ä–µ–¥–∞–µ–º user_id –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã /start
        mock_update.message.reply_text = AsyncMock()

        # –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Django
        mock_send_post_request.return_value = {
            'status': 'success',
            'first_name': 'TestUser'
        }

        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –º–µ—Ç–æ–¥
        await register_start_command(mock_update, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –æ–∂–∏–¥–∞–µ–º—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        mock_update.message.reply_text.assert_called_once_with(
            '–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å TestUser. –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –í–∞—à–µ–≥–æ Telegram ID, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ", callback_data="register")]])
        )

    @patch('bot.handlers.send_post_request', new_callable=AsyncMock)
    async def test_register_callback(self, mock_send_post_request):
        """
        –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.

        –õ–æ–≥–∏–∫–∞:
        - –ú–æ–∫–∞–µ–º CallbackQuery –∏ user_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
        - –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Django.
        - –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å.
        """
        mock_update = MagicMock(Update)
        mock_context = MagicMock(ContextTypes.DEFAULT_TYPE)

        # –ú–æ–∫–∞–µ–º CallbackQuery –∏ user_id
        mock_query = MagicMock(CallbackQuery)
        mock_query.answer = AsyncMock()
        mock_update.callback_query = mock_query
        mock_query.edit_message_text = AsyncMock()
        mock_context.user_data = {'user_id': '1'}
        mock_send_post_request.return_value = {'status': 'success'}

        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –º–µ—Ç–æ–¥
        await register_callback(mock_update, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –æ–∂–∏–¥–∞–µ–º—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        mock_query.edit_message_text.assert_called_once_with(
            text='Telegram ID —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ —Å–∞–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω–∞.',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", url="http://127.0.0.1:8000/users/profile/")]])
        )

    @patch('bot.handlers.send_post_request', new_callable=AsyncMock)
    async def test_handle_start_command(self, mock_send_post_request):
        """
        –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start, –≤—ã–∑—ã–≤–∞–µ–º–æ–π –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–æ—Ç–∞.

        –õ–æ–≥–∏–∫–∞:
        - –ú–æ–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç.
        - –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç.
        """
        mock_update = MagicMock(Update)
        mock_context = MagicMock(ContextTypes.DEFAULT_TYPE)
        mock_update.message.reply_text = AsyncMock()

        # –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Django
        mock_send_post_request.return_value = {'status': 'success', 'user_data': {'is_admin': False}}

        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –º–µ—Ç–æ–¥
        await handle_start_command(mock_update, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –æ–∂–∏–¥–∞–µ–º—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        mock_update.message.reply_text.assert_called_once_with(
            '–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —Ü–≤–µ—Ç–æ—á–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ "Classic Floral Shop"! üå∏\n–í –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Ü–≤–µ—Ç—ã –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å –∏ –ø–æ–≤–æ–¥. –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –¥–µ–ª–∞—Ç—å –≤–∞—à –º–∏—Ä —è—Ä—á–µ, –¥–æ—Å—Ç–∞–≤–ª—è—è —Ä–∞–¥–æ—Å—Ç—å –∏ –∫—Ä–∞—Å–æ—Ç—É —Å –∫–∞–∂–¥—ã–º –±—É–∫–µ—Ç–æ–º.',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="http://127.0.0.1:8000")]])
        )

    @patch('bot.handlers.send_sales_chart')
    @patch('bot.handlers.get_sales_analytics', new_callable=AsyncMock)
    async def test_analytics_handler(self, mock_get_sales_analytics, mock_send_sales_chart):
        """
        –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.

        –õ–æ–≥–∏–∫–∞:
        - –ú–æ–∫–∞–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
        - –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.
        - –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞.
        """
        mock_update = MagicMock(Update)
        mock_context = MagicMock(ContextTypes.DEFAULT_TYPE)

        # –ú–æ–∫–∞–µ–º CallbackQuery –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã
        mock_query = MagicMock(CallbackQuery)
        mock_query.answer = AsyncMock()
        mock_query.edit_message_text = AsyncMock()
        mock_context.bot.send_message = AsyncMock()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º AsyncMock –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        mock_update.callback_query = mock_query

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è query.data, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤—ã–≤–æ–¥–∞ –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞
        mock_query.data = '–ó–∞ –º–µ—Å—è—Ü'

        # –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        mock_get_sales_analytics.return_value = {'status': 'success', 'total_orders': 5, 'total_revenue': 10000}

        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –º–µ—Ç–æ–¥
        await analytics_handler(mock_update, mock_context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        mock_query.edit_message_text.assert_called_once_with(
            text="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–ó–∞ –º–µ—Å—è—Ü):\n\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: 5 –∑–∞–∫–∞–∑–æ–≤\n–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: 10000 —Ä—É–±.\n\n"
        )
        mock_send_sales_chart.assert_called_once()

    @patch('bot.handlers.generate_sales_chart')
    async def test_send_sales_chart(self, mock_generate_sales_chart):
        """
        –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–¥–∞–∂.

        –õ–æ–≥–∏–∫–∞:
        - –ú–æ–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.
        - –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ Telegram.
        """
        mock_update = MagicMock(Update)
        mock_context = MagicMock(ContextTypes.DEFAULT_TYPE)

        # –ú–æ–∫–∞–µ–º CallbackQuery –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        mock_query = MagicMock(CallbackQuery)
        mock_update.callback_query = mock_query
        mock_buffer = MagicMock()
        mock_generate_sales_chart.return_value = mock_buffer

        mock_query.message.reply_photo = AsyncMock()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º AsyncMock –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞

        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –º–µ—Ç–æ–¥
        await send_sales_chart(mock_update, mock_context, {'status': 'success'})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        mock_query.message.reply_photo.assert_called_once()
        args, kwargs = mock_query.message.reply_photo.call_args
        self.assertIsInstance(kwargs['photo'], InputFile)
        self.assertEqual(kwargs['photo'].filename, 'sales_chart.png')
        self.assertEqual(kwargs['caption'], '–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.')
        mock_buffer.close.assert_called_once()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—É—Ñ–µ—Ä –±—ã–ª –∑–∞–∫—Ä—ã—Ç –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è


if __name__ == '__main__':
    unittest.main()
