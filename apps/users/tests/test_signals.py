# apps/users/tests/test_signals.py

from django.test import TestCase  # Импорт базового класса для создания тестов Django
from django.contrib.auth import get_user_model  # Импорт функции для получения пользовательской модели

from apps.users.models import Profile  # Импорт модели профиля пользователя

# Получение пользовательской модели для создания тестовых пользователей
User = get_user_model()


class UserProfileSignalsTest(TestCase):
    """
    Набор тестов для проверки сигналов, связанных с профилем пользователя.

    Тестируемые сценарии:
    1. Автоматическое создание профиля при создании пользователя.
    2. Обновление профиля при сохранении данных пользователя.
    3. Отсутствие повторного создания профиля для существующего пользователя.
    4. Отсутствие ошибки при сохранении пользователя без профиля.
    """

    def setUp(self):
        """
        Создание тестового пользователя для проверки сигналов.

        Устанавливает начальные данные для всех тестов в классе.

        Входные данные:
            - username: 'testuser'.
            - first_name: 'Иван'.
            - last_name: 'Иванов'.
        """
        self.user = User.objects.create(username='testuser', first_name='Иван', last_name='Иванов')  # Создаем тестового пользователя

    def test_profile_created_on_user_creation(self):
        """
        Проверка автоматического создания профиля при создании пользователя.

        Убеждается, что после создания пользователя для него автоматически создается профиль.

        Ожидаемый результат:
            - Профиль пользователя существует в базе данных.
        """
        profile_exists = Profile.objects.filter(user=self.user).exists()  # Проверяем существование профиля в базе данных
        self.assertTrue(profile_exists, "Профиль не был создан автоматически при создании пользователя")

    def test_profile_updated_on_user_save(self):
        """
        Проверка обновления профиля при сохранении пользователя.

        Убеждается, что после изменения и сохранения данных пользователя профиль также обновляется.

        Ожидаемый результат:
            - Профиль пользователя соответствует обновленным данным.
        """
        # Обновляем имя пользователя и сохраняем изменения
        self.user.first_name = 'Обновленное имя'
        self.user.save()

        # Обновляем профиль пользователя (вызывается сигнал save_user_profile)
        self.user.profile.refresh_from_db()
        self.assertEqual(self.user.first_name, 'Обновленное имя',
                         "Профиль не был обновлен после сохранения пользователя")

    def test_no_profile_creation_for_existing_user(self):
        """
        Проверка, что сигнал не создает профиль повторно для существующего пользователя.

        Убеждается, что повторное сохранение пользователя не приводит к созданию нового профиля.

        Ожидаемый результат:
            - Количество профилей остается неизменным.
        """
        initial_profile_count = Profile.objects.count()  # Количество профилей до сохранения пользователя

        # Сохраняем пользователя, что вызывает сигнал save_user_profile
        self.user.save()

        final_profile_count = Profile.objects.count()  # Количество профилей после сохранения пользователя

        # Количество профилей не должно измениться
        self.assertEqual(initial_profile_count, final_profile_count,
                         "Сигнал создал повторный профиль для существующего пользователя")

    def test_no_error_when_profile_does_not_exist(self):
        """
        Проверка отсутствия ошибки, если профиль не существует при сохранении пользователя.

        Убеждается, что при отсутствии профиля пользователя сохранение данных пользователя не вызывает ошибок.

        Ожидаемый результат:
            - Ошибок при сохранении пользователя без профиля не возникает.
        """
        Profile.objects.filter(user=self.user).delete()  # Удаляем профиль, если он существует

        try:
            # Сохраняем пользователя, что вызовет сигнал save_user_profile
            self.user.save()
        except Exception as e:
            self.fail(f"При сохранении пользователя возникла ошибка: {e}")  # Проверка на отсутствие ошибки
